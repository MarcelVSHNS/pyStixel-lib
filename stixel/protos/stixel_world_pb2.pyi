"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _LabelType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _LabelTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_LabelType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    TYPE_UNDEFINED: _LabelType.ValueType  # 0
    TYPE_CAR: _LabelType.ValueType  # 1
    TYPE_TRUCK: _LabelType.ValueType  # 2
    TYPE_BUS: _LabelType.ValueType  # 3
    TYPE_OTHER_VEHICLE: _LabelType.ValueType  # 4
    """Other small vehicles (e.g. pedicab) and large vehicles (e.g. construction
    vehicles, RV, limo, tram).
    """
    TYPE_MOTORCYCLIST: _LabelType.ValueType  # 5
    TYPE_BICYCLIST: _LabelType.ValueType  # 6
    TYPE_PEDESTRIAN: _LabelType.ValueType  # 7
    TYPE_SIGN: _LabelType.ValueType  # 8
    TYPE_TRAFFIC_LIGHT: _LabelType.ValueType  # 9
    TYPE_POLE: _LabelType.ValueType  # 10
    """Lamp post, traffic sign pole etc."""
    TYPE_CONSTRUCTION_CONE: _LabelType.ValueType  # 11
    """Construction cone/pole."""
    TYPE_BICYCLE: _LabelType.ValueType  # 12
    TYPE_MOTORCYCLE: _LabelType.ValueType  # 13
    TYPE_BUILDING: _LabelType.ValueType  # 14
    TYPE_VEGETATION: _LabelType.ValueType  # 15
    """Bushes, tree branches, tall grasses, flowers etc."""
    TYPE_TREE_TRUNK: _LabelType.ValueType  # 16
    TYPE_CURB: _LabelType.ValueType  # 17
    """Curb on the edge of roads. This does not include road boundaries if
    there’s no curb.
    """
    TYPE_ROAD: _LabelType.ValueType  # 18
    """Surface a vehicle could drive on. This include the driveway connecting
    parking lot and road over a section of sidewalk.
    """
    TYPE_LANE_MARKER: _LabelType.ValueType  # 19
    """Marking on the road that’s specifically for defining lanes such as
    single/double white/yellow lines.
    """
    TYPE_OTHER_GROUND: _LabelType.ValueType  # 20
    """Marking on the road other than lane markers, bumps, cateyes, railtracks
    etc.
    """
    TYPE_WALKABLE: _LabelType.ValueType  # 21
    """Most horizontal surface that’s not drivable, e.g. grassy hill,
    pedestrian walkway stairs etc.
    """
    TYPE_SIDEWALK: _LabelType.ValueType  # 22
    """Nicely paved walkable surface when pedestrians most likely to walk on."""

class LabelType(_LabelType, metaclass=_LabelTypeEnumTypeWrapper): ...

TYPE_UNDEFINED: LabelType.ValueType  # 0
TYPE_CAR: LabelType.ValueType  # 1
TYPE_TRUCK: LabelType.ValueType  # 2
TYPE_BUS: LabelType.ValueType  # 3
TYPE_OTHER_VEHICLE: LabelType.ValueType  # 4
"""Other small vehicles (e.g. pedicab) and large vehicles (e.g. construction
vehicles, RV, limo, tram).
"""
TYPE_MOTORCYCLIST: LabelType.ValueType  # 5
TYPE_BICYCLIST: LabelType.ValueType  # 6
TYPE_PEDESTRIAN: LabelType.ValueType  # 7
TYPE_SIGN: LabelType.ValueType  # 8
TYPE_TRAFFIC_LIGHT: LabelType.ValueType  # 9
TYPE_POLE: LabelType.ValueType  # 10
"""Lamp post, traffic sign pole etc."""
TYPE_CONSTRUCTION_CONE: LabelType.ValueType  # 11
"""Construction cone/pole."""
TYPE_BICYCLE: LabelType.ValueType  # 12
TYPE_MOTORCYCLE: LabelType.ValueType  # 13
TYPE_BUILDING: LabelType.ValueType  # 14
TYPE_VEGETATION: LabelType.ValueType  # 15
"""Bushes, tree branches, tall grasses, flowers etc."""
TYPE_TREE_TRUNK: LabelType.ValueType  # 16
TYPE_CURB: LabelType.ValueType  # 17
"""Curb on the edge of roads. This does not include road boundaries if
there’s no curb.
"""
TYPE_ROAD: LabelType.ValueType  # 18
"""Surface a vehicle could drive on. This include the driveway connecting
parking lot and road over a section of sidewalk.
"""
TYPE_LANE_MARKER: LabelType.ValueType  # 19
"""Marking on the road that’s specifically for defining lanes such as
single/double white/yellow lines.
"""
TYPE_OTHER_GROUND: LabelType.ValueType  # 20
"""Marking on the road other than lane markers, bumps, cateyes, railtracks
etc.
"""
TYPE_WALKABLE: LabelType.ValueType  # 21
"""Most horizontal surface that’s not drivable, e.g. grassy hill,
pedestrian walkway stairs etc.
"""
TYPE_SIDEWALK: LabelType.ValueType  # 22
"""Nicely paved walkable surface when pedestrians most likely to walk on."""
global___LabelType = LabelType

@typing.final
class Stixel(google.protobuf.message.Message):
    """Stixel definition"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    U_FIELD_NUMBER: builtins.int
    V_T_FIELD_NUMBER: builtins.int
    V_B_FIELD_NUMBER: builtins.int
    D_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    WIDTH_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    u: builtins.int
    """Column in image plane"""
    v_t: builtins.int
    """Top point in image plane of the Stixel"""
    v_b: builtins.int
    """Bottom point in image plane of the Stixel"""
    d: builtins.float
    """Distance to the camera"""
    label: global___LabelType.ValueType
    """Semantic class label"""
    width: builtins.int
    """Stixel width in pixels"""
    confidence: builtins.float
    """Confidence of the Stixel"""
    def __init__(
        self,
        *,
        u: builtins.int = ...,
        v_t: builtins.int = ...,
        v_b: builtins.int = ...,
        d: builtins.float = ...,
        label: global___LabelType.ValueType = ...,
        width: builtins.int = ...,
        confidence: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["confidence", b"confidence", "d", b"d", "label", b"label", "u", b"u", "v_b", b"v_b", "v_t", b"v_t", "width", b"width"]) -> None: ...

global___Stixel = Stixel

@typing.final
class CameraInfo(google.protobuf.message.Message):
    """Camera-Information"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    K_FIELD_NUMBER: builtins.int
    T_FIELD_NUMBER: builtins.int
    R_FIELD_NUMBER: builtins.int
    D_FIELD_NUMBER: builtins.int
    DIST_MODEL_FIELD_NUMBER: builtins.int
    IMG_NAME_FIELD_NUMBER: builtins.int
    REFERENCE_FIELD_NUMBER: builtins.int
    WIDTH_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    dist_model: builtins.str
    """Distortion model"""
    img_name: builtins.str
    """Image name"""
    reference: builtins.str
    """Reference string for the transformation-Matrix T"""
    width: builtins.int
    """Camera image size."""
    height: builtins.int
    @property
    def K(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Camera-Matrix (3x3)"""

    @property
    def T(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Transformation-Matrix (4x4) [R|t]"""

    @property
    def R(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Rectifications-Matrix (4x4)"""

    @property
    def D(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Distortion coefficients"""

    def __init__(
        self,
        *,
        K: collections.abc.Iterable[builtins.float] | None = ...,
        T: collections.abc.Iterable[builtins.float] | None = ...,
        R: collections.abc.Iterable[builtins.float] | None = ...,
        D: collections.abc.Iterable[builtins.float] | None = ...,
        dist_model: builtins.str = ...,
        img_name: builtins.str = ...,
        reference: builtins.str = ...,
        width: builtins.int | None = ...,
        height: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_height", b"_height", "_width", b"_width", "height", b"height", "width", b"width"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["D", b"D", "K", b"K", "R", b"R", "T", b"T", "_height", b"_height", "_width", b"_width", "dist_model", b"dist_model", "height", b"height", "img_name", b"img_name", "reference", b"reference", "width", b"width"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_height", b"_height"]) -> typing.Literal["height"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_width", b"_width"]) -> typing.Literal["width"] | None: ...

global___CameraInfo = CameraInfo

@typing.final
class Image(google.protobuf.message.Message):
    """Image definition"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    FORMAT_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    """Bytestream of the image"""
    format: builtins.str
    """Image byte encoding (e.g. "png")"""
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
        format: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "format", b"format"]) -> None: ...

global___Image = Image

@typing.final
class StixelWorld(google.protobuf.message.Message):
    """StixelWorld definition"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STIXEL_LIST_FIELD_NUMBER: builtins.int
    CAMERA_INFO_FIELD_NUMBER: builtins.int
    IMAGE_FIELD_NUMBER: builtins.int
    @property
    def stixel_list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Stixel]:
        """List of Stixels"""

    @property
    def camera_info(self) -> global___CameraInfo:
        """Camera Information"""

    @property
    def image(self) -> global___Image:
        """Image. Decode with util."""

    def __init__(
        self,
        *,
        stixel_list: collections.abc.Iterable[global___Stixel] | None = ...,
        camera_info: global___CameraInfo | None = ...,
        image: global___Image | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["camera_info", b"camera_info", "image", b"image"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["camera_info", b"camera_info", "image", b"image", "stixel_list", b"stixel_list"]) -> None: ...

global___StixelWorld = StixelWorld
